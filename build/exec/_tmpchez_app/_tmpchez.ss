#!/nix/store/ibs60g8cr274aciwbniqd68gwx33z3gm-chez-scheme-9.5.6/bin/scheme --program

;; @generated by Idris 0.5.1-80ff76b, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])

(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (logbit? bits x)
      (logor x (ash -1 bits))
      (logand x (sub1 (ash 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (logand x (sub1 (ash 1 bits))))


(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (quotient x y) bits)))

(define (integer->bits8 x) (logand x (sub1 (ash 1 8))))
(define (integer->bits16 x) (logand x (sub1 (ash 1 16))))
(define (integer->bits32 x) (logand x (sub1 (ash 1 32))))
(define (integer->bits64 x) (logand x (sub1 (ash 1 64))))

(define (bits16->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits64->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits32 x) (logand x (sub1 (ash 1 32))))

(define (blodwen-bits-shl-signed x y bits) (blodwen-toSignedInt (ash x y) bits))

(define (blodwen-bits-shl x y bits) (logand (ash x y) (sub1 (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))

(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define PreludeC-45IO-prim__getStr (lambda (farg-0) ((foreign-procedure "idris2_getStr" () string) )))
(define SystemC-45FileC-45Virtual-prim__stdout (lambda () ((foreign-procedure "idris2_stdout" () void*) )))
(define SystemC-45FileC-45Virtual-prim__stdin (lambda () ((foreign-procedure "idris2_stdin" () void*) )))
(define SystemC-45FileC-45ReadWrite-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure "idris2_eof" (void*) int) farg-0)))
(define SystemC-45FileC-45Process-prim__flush (lambda (farg-0 farg-1) ((foreign-procedure "fflush" (void*) int) farg-0)))
(define csegen-33(blodwen-lazy (lambda () (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10120) (PreludeC-45Types-u--null_Foldable_List arg-10120))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10149) arg-10149)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10163) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10163))))))))))
(define u--prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define u--prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define Main-case--searched-7125 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((e-3 (cdr arg-4))) (PreludeC-45Interfaces-concat (cons (lambda (arg-8026) (lambda (arg-8029) (string-append arg-8026 arg-8029))) "") (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (DataC-45Vect-u--foldr_Foldable_C-40VectC-32C-36nC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (DataC-45Vect-u--foldl_Foldable_C-40VectC-32C-36nC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10120) (DataC-45Vect-u--null_Foldable_C-40VectC-32C-36nC-41 arg-10120))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (DataC-45Vect-u--foldlM_Foldable_C-40VectC-32C-36nC-41 i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10149) (DataC-45Vect-u--toList_Foldable_C-40VectC-32C-36nC-41 arg-10149))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10163) (DataC-45Vect-u--foldMap_Foldable_C-40VectC-32C-36nC-41 i_con-0 u--f arg-10163))))))) (DataC-45Vect-u--map_Functor_C-40VectC-32C-36nC-41 (lambda (arg-5) (string-append arg-5 "\xa;")) (DataC-45Vect-u--map_Functor_C-40VectC-32C-36nC-41 (lambda (lamc-0) (let ((e-5 (car lamc-0))) (let ((e-4 (cdr lamc-0))) (string-append (PreludeC-45Show-u--show_Show_Nat e-5) (string-append ": " e-4))))) e-3))))))
(define Main-n--3956-7003-u--addToData (lambda (arg-0 arg-1 arg-2 arg-4) (if (null? arg-4) (cons arg-2 '()) (let ((e-3 (car arg-4))) (let ((e-4 (cdr arg-4))) (cons e-3 (Main-n--3956-7003-u--addToData arg-0 arg-1 arg-2 e-4)))))))
(define Main-size (lambda (arg-0) (let ((e-0 (car arg-0))) e-0)))
(define Main-searched (lambda (arg-0 arg-1) (let ((e-0 (car arg-0))) (let ((e-1 (cdr arg-0))) (let ((u--indexed (DataC-45Vect-u--zip_Zippable_C-40VectC-32C-36kC-41 (DataC-45Vect-reverse (Main-indices e-0)) e-1))) (Main-case--searched-7125 e-0 e-1 arg-1 u--indexed (DataC-45Vect-filter (lambda (eta-0) (DataC-45String-isInfixOf arg-1 (Builtin-snd eta-0))) u--indexed)))))))
(define Main-processInput (lambda (arg-0 arg-1) (let ((sc0 (Main-parse arg-1))) (if (null? sc0) (box (cons "Invalid command\xa;" arg-0)) (let ((e-2 (unbox sc0))) (case (vector-ref e-2 0) ((0) (let ((e-3 (vector-ref e-2 1))) (box (cons (string-append "ID " (string-append (PreludeC-45Show-u--show_Show_Nat (Main-size arg-0)) "\xa;")) (Main-addToStore arg-0 e-3))))) ((4) (let ((e-4 (vector-ref e-2 1))) (box (cons (Main-searched arg-0 e-4) arg-0)))) ((1) (let ((e-5 (vector-ref e-2 1))) (Main-getEntry e-5 arg-0))) ((3) (box (cons (string-append (PreludeC-45Show-u--show_Show_Nat (Main-size arg-0)) "\xa;") arg-0))) (else '())))))))
(define Main-parseCommand (lambda (arg-0 arg-1) (cond ((equal? arg-0 "add") (box (vector 0 arg-1))) ((equal? arg-0 "get") (let ((sc1 (PreludeC-45Interfaces-all (csegen-33) (lambda (eta-0) (PreludeC-45Types-isDigit eta-0)) (PreludeC-45Types-fastUnpack arg-1)))) (cond ((equal? sc1 0) '()) (else (box (vector 1 (PreludeC-45Cast-u--cast_Cast_String_Integer arg-1))))))) ((equal? arg-0 "search") (box (vector 4 arg-1))) ((equal? arg-0 "size") (cond ((equal? arg-1 "") (box (vector 3 )))(else '()))) ((equal? arg-0 "quit") (cond ((equal? arg-1 "") (box (vector 2 )))(else '())))(else '()))))
(define Main-parse (lambda (arg-0) (let ((sc0 (DataC-45String-span (lambda (arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-1 #\ )) arg-0))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (Main-parseCommand e-2 (DataC-45String-ltrim e-3)))))))
(define Main-main(blodwen-lazy (lambda () (SystemC-45REPL-replWith (cons (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8437) (lambda (eta-0) (PreludeC-45IO-u--map_Functor_IO u--func arg-8437 eta-0)))))) (lambda (u--a) (lambda (arg-9139) (lambda (eta-0) arg-9139))) (lambda (u--b) (lambda (u--a) (lambda (arg-9145) (lambda (arg-9152) (lambda (eta-0) (let ((act-17 (arg-9145 eta-0))) (let ((act-16 (arg-9152 eta-0))) (act-17 act-16))))))))) (lambda (u--b) (lambda (u--a) (lambda (arg-9620) (lambda (arg-9623) (lambda (eta-0) (let ((act-24 (arg-9620 eta-0))) ((arg-9623 act-24) eta-0))))))) (lambda (u--a) (lambda (arg-9634) (lambda (eta-0) (let ((act-51 (arg-9634 eta-0))) (act-51 eta-0)))))) (lambda (u--a) (lambda (arg-10871) arg-10871))) (cons 0 '()) "Command: " (lambda (eta-0) (lambda (eta-1) (Main-processInput eta-0 eta-1)))))))
(define Main-items (lambda (arg-0) (let ((e-1 (cdr arg-0))) e-1)))
(define Main-indices (lambda (arg-0) (cond ((equal? arg-0 0) '())(else (let ((e-0 (- arg-0 1))) (cons e-0 (Main-indices e-0)))))))
(define Main-getEntry (lambda (arg-0 arg-1) (let ((u--store_items (Main-items arg-1))) (let ((sc0 (DataC-45Fin-integerToFin arg-0 (Main-size arg-1)))) (if (null? sc0) (box (cons "Out of range\xa;" arg-1)) (let ((e-2 (unbox sc0))) (box (cons (string-append (DataC-45Vect-index e-2 u--store_items) "\xa;") arg-1))))))))
(define Main-addToStore (lambda (arg-0 arg-1) (let ((e-0 (car arg-0))) (let ((e-1 (cdr arg-0))) (cons (+ e-0 1) (Main-n--3956-7003-u--addToData e-0 e-1 arg-1 e-1))))))
(define DataC-45String-with--ltrim-3665 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (case (vector-ref arg-1 0) ((0) "")(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc2 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc2 1) (DataC-45String-with--ltrim-3665 e-1 (e-2))) (else u--str))))))))))(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc1 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc1 1) (DataC-45String-with--ltrim-3665 e-1 (e-2))) (else u--str)))))))))))
(define DataC-45String-with--asList-3641 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (if (null? arg-1) (vector 0 ) (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))(else (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))))
(define DataC-45String-strM (lambda (arg-0) (cond ((equal? arg-0 "") '())(else (Builtin-believe_me (cons (string-ref arg-0 0) (substring arg-0 1 (string-length arg-0))))))))
(define DataC-45String-span (lambda (arg-0 arg-1) (let ((sc0 (DataC-45List-span arg-0 (PreludeC-45Types-fastUnpack arg-1)))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (cons (PreludeC-45Types-fastPack e-2) (PreludeC-45Types-fastPack e-3)))))))
(define DataC-45String-ltrim (lambda (arg-0) (DataC-45String-with--ltrim-3665 arg-0 (DataC-45String-asList arg-0))))
(define DataC-45String-isInfixOf (lambda (arg-0 arg-1) (DataC-45List-isInfixOf (cons (lambda (arg-528) (lambda (arg-531) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-528 arg-531))) (lambda (arg-538) (lambda (arg-541) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-538 arg-541)))) (PreludeC-45Types-fastUnpack arg-0) (PreludeC-45Types-fastUnpack arg-1))))
(define DataC-45String-asList (lambda (arg-0) (DataC-45String-with--asList-3641 arg-0 (DataC-45String-strM arg-0))))
(define DataC-45Fin-natToFin (lambda (arg-0 arg-1) (let ((sc0 (DataC-45Nat-isLT arg-0 arg-1))) (case (vector-ref sc0 0) ((0) (box arg-0)) (else '())))))
(define DataC-45Fin-integerToFin (lambda (arg-0 arg-1) (cond ((equal? arg-1 0) '())(else (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Integer arg-0 0))) (cond ((equal? sc0 1) (DataC-45Fin-natToFin (PreludeC-45Types-prim__integerToNat arg-0) arg-1)) (else '())))))))
(define PreludeC-45Basics-flip (lambda (arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Builtin-snd (lambda (arg-2) (let ((e-3 (cdr arg-2))) e-3)))
(define Builtin-believe_me (lambda (arg-2) arg-2))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (let ((e-1 (car arg-2))) ((e-1 u--acc) (arg-3 u--elem))))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (let ((sc1 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc1 0) 0)(else 1))))) (cond ((equal? sc0 1) (Builtin-believe_me arg-0)) (else 0)))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\ ))) (cond ((equal? sc0 1) 1) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 9)))) (cond ((equal? sc1 1) 1) (else (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 13)))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 10)))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 12)))) (cond ((equal? sc4 1) 1) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 11)))) (cond ((equal? sc5 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 (integer->char 160))))))))))))))))))))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0)))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) 1) (else arg-1))))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) arg-1) (else 0))))
(define PreludeC-45Interfaces-concat (lambda (arg-2 arg-3 ext-0) (let ((e-6 (vector-ref arg-3 5))) (((((e-6 'erased) 'erased) arg-2) (lambda (eta-0) eta-0)) ext-0))))
(define PreludeC-45Interfaces-any (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8026) (lambda (arg-8029) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool arg-8026 arg-8029))) 0)) ext-1) ext-0))))
(define PreludeC-45Interfaces-all (lambda (arg-2 ext-1 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) (cons (lambda (arg-8026) (lambda (arg-8029) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool arg-8026 arg-8029))) 1)) ext-1) ext-0))))
(define PreludeC-45Interfaces-C-62C-62 (lambda (arg-2 arg-3 arg-4) (let ((e-2 (vector-ref arg-2 1))) ((((e-2 'erased) 'erased) arg-3) (lambda (_-9858) (arg-4))))))
(define PreludeC-45Show-u--show_Show_Nat (lambda (arg-0) (PreludeC-45Show-u--show_Show_Integer arg-0)))
(define PreludeC-45Show-u--show_Show_Integer (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Integer (vector 0 ) arg-0)))
(define PreludeC-45Show-u--showPrec_Show_Integer (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3 ext-0) (let ((act-5 (arg-3 ext-0))) (arg-2 act-5))))
(define PreludeC-45IO-putStr (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__putStr arg-2 eta-0))))))
(define PreludeC-45IO-getLine (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (PreludeC-45IO-prim__getStr eta-0))))))
(define PrimIO-unsafePerformIO (lambda (arg-1) (PrimIO-unsafeCreateWorld (lambda (u--w) (arg-1 u--w)))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PreludeC-45Cast-u--cast_Cast_String_Integer (lambda (ext-0) (cast-string-int ext-0)))
(define DataC-45Nat-succNotLTEzero (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define DataC-45Nat-isLTE (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (vector 0 0))(else (let ((e-0 (- arg-0 1))) (cond ((equal? arg-1 0) (vector 1 (lambda (eta-0) (DataC-45Nat-succNotLTEzero eta-0))))(else (let ((e-1 (- arg-1 1))) (let ((sc0 (DataC-45Nat-isLTE e-0 e-1))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (vector 1 (lambda (eta-0) (e-2 (DataC-45Nat-fromLteSucc eta-0)))))) (else (let ((e-3 (vector-ref sc0 1))) (vector 0 (+ e-3 1))))))))))))))
(define DataC-45Nat-isLT (lambda (arg-0 arg-1) (DataC-45Nat-isLTE (+ arg-0 1) arg-1)))
(define DataC-45Nat-fromLteSucc (lambda (arg-2) (cond ((equal? arg-2 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-2 (- arg-2 1))) e-2)))))
(define DataC-45List-tails (lambda (arg-1) (cons arg-1 (if (null? arg-1) '() (let ((e-3 (cdr arg-1))) (DataC-45List-tails e-3))))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-isPrefixOfBy (lambda (arg-2 arg-3 arg-4) (if (null? arg-3) 1 (if (null? arg-4) 0 (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (let ((e-4 (car arg-4))) (let ((e-5 (cdr arg-4))) (let ((sc4 ((arg-2 e-1) e-4))) (cond ((equal? sc4 1) (DataC-45List-isPrefixOfBy arg-2 e-2 e-5)) (else 0)))))))))))
(define DataC-45List-isPrefixOf (lambda (arg-1 ext-0 ext-1) (DataC-45List-isPrefixOfBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-1))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45List-isInfixOf (lambda (arg-1 arg-2 arg-3) (PreludeC-45Interfaces-any (csegen-33) (lambda (eta-0) (DataC-45List-isPrefixOf arg-1 arg-2 eta-0)) (DataC-45List-tails arg-3))))
(define SystemC-45REPL-replWith (lambda (arg-2 arg-3 arg-4 arg-5) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-2 (SystemC-45FileC-45Virtual-stdin))) (lambda (u--eof) (cond ((equal? u--eof 1) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 )))))) (else (PreludeC-45Interfaces-C-62C-62 (let ((e-7 (car arg-2))) e-7) (PreludeC-45IO-putStr arg-2 arg-4) (lambda () (PreludeC-45Interfaces-C-62C-62 (let ((e-7 (car arg-2))) e-7) (SystemC-45FileC-45Process-fflush arg-2 (SystemC-45FileC-45Virtual-stdout)) (lambda () (let ((e-7 (car arg-2))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (PreludeC-45IO-getLine arg-2)) (lambda (u--x) (let ((sc3 ((arg-5 arg-3) u--x))) (if (null? sc3) (let ((e-12 (car arg-2))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 0 ))))) (let ((e-11 (unbox sc3))) (let ((e-13 (car e-11))) (let ((e-12 (cdr e-11))) (PreludeC-45Interfaces-C-62C-62 (let ((e-15 (car arg-2))) e-15) (PreludeC-45IO-putStr arg-2 e-13) (lambda () (SystemC-45REPL-replWith arg-2 e-12 arg-4 arg-5))))))))))))))))))))))))
(define SystemC-45FileC-45Virtual-stdout(blodwen-lazy (lambda () (SystemC-45FileC-45Virtual-prim__stdout))))
(define SystemC-45FileC-45Virtual-stdin(blodwen-lazy (lambda () (SystemC-45FileC-45Virtual-prim__stdin))))
(define SystemC-45FileC-45ReadWrite-fEOF (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__eof arg-2 eta-0))))) (lambda (u--res) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63))))))))))))
(define SystemC-45FileC-45Process-fflush (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (vector 0 ))) (let ((e-9 (cdr arg-1))) ((e-9 'erased) (lambda (eta-0) (SystemC-45FileC-45Process-prim__flush arg-2 eta-0))))))))))
(define DataC-45Vect-n--4879-2258-u--go (lambda (arg-2 arg-5 arg-6) (if (null? arg-6) arg-5 (let ((e-3 (car arg-6))) (let ((e-4 (cdr arg-6))) (DataC-45Vect-n--4879-2258-u--go arg-2 (cons e-3 arg-5) e-4))))))
(define DataC-45Vect-u--zip_Zippable_C-40VectC-32C-36kC-41 (lambda (ext-0 ext-1) (DataC-45Vect-u--zipWith_Zippable_C-40VectC-32C-36kC-41 (lambda (__leftTupleSection-0) (lambda (__infixTupleSection-0) (cons __leftTupleSection-0 __infixTupleSection-0))) ext-0 ext-1)))
(define DataC-45Vect-u--zipWith_Zippable_C-40VectC-32C-36kC-41 (lambda (arg-4 arg-5 arg-6) (if (null? arg-5) '() (let ((e-3 (car arg-5))) (let ((e-4 (cdr arg-5))) (let ((e-8 (car arg-6))) (let ((e-9 (cdr arg-6))) (cons ((arg-4 e-3) e-8) (DataC-45Vect-u--zipWith_Zippable_C-40VectC-32C-36kC-41 arg-4 e-4 e-9)))))))))
(define DataC-45Vect-u--toList_Foldable_C-40VectC-32C-36nC-41 (lambda (ext-0) (DataC-45Vect-u--foldr_Foldable_C-40VectC-32C-36nC-41 (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))) '() ext-0)))
(define DataC-45Vect-u--null_Foldable_C-40VectC-32C-36nC-41 (lambda (arg-2) (if (null? arg-2) 1 0)))
(define DataC-45Vect-u--map_Functor_C-40VectC-32C-36nC-41 (lambda (arg-3 arg-4) (if (null? arg-4) '() (let ((e-3 (car arg-4))) (let ((e-4 (cdr arg-4))) (cons (arg-3 e-3) (DataC-45Vect-u--map_Functor_C-40VectC-32C-36nC-41 arg-3 e-4)))))))
(define DataC-45Vect-u--foldr_Foldable_C-40VectC-32C-36nC-41 (lambda (arg-3 arg-4 arg-5) (DataC-45Vect-foldrImpl arg-3 arg-4 (lambda (eta-0) eta-0) arg-5)))
(define DataC-45Vect-u--foldl_Foldable_C-40VectC-32C-36nC-41 (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) arg-4 (let ((e-3 (car arg-5))) (let ((e-4 (cdr arg-5))) (DataC-45Vect-u--foldl_Foldable_C-40VectC-32C-36nC-41 arg-3 ((arg-3 arg-4) e-3) e-4))))))
(define DataC-45Vect-u--foldlM_Foldable_C-40VectC-32C-36nC-41 (lambda (arg-4 arg-5 arg-6 ext-0) (DataC-45Vect-u--foldl_Foldable_C-40VectC-32C-36nC-41 (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-5 u--b eta-0)))))) (let ((e-1 (vector-ref arg-4 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-6))) ext-0)))
(define DataC-45Vect-u--foldMap_Foldable_C-40VectC-32C-36nC-41 (lambda (arg-3 arg-4 ext-0) (DataC-45Vect-u--foldl_Foldable_C-40VectC-32C-36nC-41 (lambda (u--acc) (lambda (u--elem) (let ((e-1 (car arg-3))) ((e-1 u--acc) (arg-4 u--elem))))) (let ((e-2 (cdr arg-3))) e-2) ext-0)))
(define DataC-45Vect-reverse (lambda (arg-2) (DataC-45Vect-n--4879-2258-u--go arg-2 '() arg-2)))
(define DataC-45Vect-index (lambda (arg-2 arg-3) (cond ((equal? arg-2 0) (let ((e-5 (car arg-3))) e-5))(else (let ((e-2 (- arg-2 1))) (let ((e-10 (cdr arg-3))) (DataC-45Vect-index e-2 e-10)))))))
(define DataC-45Vect-foldrImpl (lambda (arg-3 arg-4 arg-5 arg-6) (if (null? arg-6) (arg-5 arg-4) (let ((e-3 (car arg-6))) (let ((e-4 (cdr arg-6))) (DataC-45Vect-foldrImpl arg-3 arg-4 (lambda (eta-0) (arg-5 ((arg-3 e-3) eta-0))) e-4))))))
(define DataC-45Vect-filter (lambda (arg-2 arg-3) (if (null? arg-3) (cons 0 '()) (let ((e-3 (car arg-3))) (let ((e-4 (cdr arg-3))) (let ((sc1 (DataC-45Vect-filter arg-2 e-4))) (let ((e-2 (car sc1))) (let ((e-5 (cdr sc1))) (let ((sc2 (arg-2 e-3))) (cond ((equal? sc2 1) (cons (+ e-2 1) (cons e-3 e-5))) (else (cons e-2 e-5))))))))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (Main-main))  (collect 4)
  (blodwen-run-finalisers)
  
  )